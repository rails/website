---
layout: post
title: "Structured Event Reporting lands in Rails!"
categories: news
author: Emmanuel Hayford
og_image: assets/images/this-week-in-rails.png
published: true
date: 2025-08-15
---

Hi! [Emmanuel Hayford](https://hayford.dev/) here with some Rails codebase updates for you!  
  
 [Add #assert\_events\_reported test helper](https://github.com/rails/rails/pull/55497)  
Rails added a new test helper that lets you assert **multiple** events were reported within a block— **order-agnostic** , with support for **payload** and **tag** matching, and it **ignores extra events**. Handy for workflows that emit several instrumentation events in one go.  
  
```ruby
assert_events_reported([
  { name: "user.created", payload: { id: 123 } },
  { name: "email.sent",   payload: { to: "user@example.com" } }
]) do
  create_user_and_send_welcome_email
end
```

  
[Add `deliver_all_later` to enqueue multiple emails at once](https://github.com/rails/rails/pull/55448)  
You can now enqueue many emails in one go—reducing round trips to your queue backend. Build an array of **MessageDelivery** objects and push them at once. Options (like **queue:** ) are forwarded to the jobs. Under the hood this uses **ActiveJob.perform\_all\_later** , and if the adapter doesn’t support bulk enqueue it gracefully falls back to enqueuing individually.&nbsp;  
  
```ruby
# Build deliveries
user_emails = User.find_each.map { |user| Notifier.welcome(user) }

# Enqueue all at once
ActionMailer.deliver_all_later(user_emails)
```

  
[Add Copy as Text button to error pages](https://github.com/rails/rails/pull/55431)  
**“Copy as text” button on error pages** — Development error pages now include a **Copy as text** button in the header that puts a concise, plain‑text version of the exception on your clipboard.  
  

[![copy.png](https://world.hey.com/this.week.in.rails/b4395645/representations/eyJfcmFpbHMiOnsiZGF0YSI6MjIyODU2NDE3NSwicHVyIjoiYmxvYl9pZCJ9fQ--412cd304b2f46ef3e471554c9e570edc289053fe79b6800e2cf3030c1c6038f3/eyJfcmFpbHMiOnsiZGF0YSI6eyJmb3JtYXQiOiJwbmciLCJyZXNpemVfdG9fbGltaXQiOlszODQwLDI1NjBdLCJxdWFsaXR5Ijo2MCwibG9hZGVyIjp7InBhZ2UiOm51bGx9LCJjb2FsZXNjZSI6dHJ1ZX0sInB1ciI6InZhcmlhdGlvbiJ9fQ--7edc7b21f6fad97fa22412618822c4d19725431f296c7ce47dc174b61535d27c/copy.png)](https://world.hey.com/this.week.in.rails/b4395645/blobs/eyJfcmFpbHMiOnsiZGF0YSI6MjIyODU2NDE3NSwicHVyIjoiYmxvYl9pZCJ9fQ--412cd304b2f46ef3e471554c9e570edc289053fe79b6800e2cf3030c1c6038f3/copy.png?disposition=attachment "Download copy.png")
  
  
[Remove autocomplete="off" from hidden inputs in button\_to](https://github.com/rails/rails/pull/55336)  
Hidden inputs generated by **form\_tag** , **token\_tag** , **method\_tag** , and the hidden params inside **button\_to** no longer force **autocomplete="off"**. A new setting, **config.action\_view.remove\_hidden\_field\_autocomplete** , controls this behaviour (default stays false for existing apps; **load\_defaults 8.1** sets it to **true** )  
  
```ruby
Rails.application.config.action_view.remove_hidden_field_autocomplete = true
```
  
[Structured Event Reporting in Rails](https://github.com/rails/rails/pull/55334)  
Rails adds a first‑class **Event Reporter** with a unified API for structured telemetry. Access it via **Rails.event** and emit events with context and tags:  
  

```ruby
Rails.event.set_context(request_id: "abc123", shop_id: 456)

Rails.event.tagged("graphql") do
  Rails.event.notify("user.signup", user_id: 123, email: "user@example.com")
end
```
  
Applications subscribe to events and choose an encoder (e.g., JSON) for output:  
  

```ruby
class MySubscriber
  def emit(event)
    encoded = ActiveSupport::EventReporter.encoder(:json).encode(event)
    StructuredLogExporter.export(encoded)
  end
end

Rails.event.subscribe(MySubscriber.new)
```
  
  
[Action Cable: stream\_for now supports composite channels](https://github.com/rails/rails/pull/55197)  
You can now stream and broadcast to **composite targets** by passing an array to **ActionCable::Channel#stream\_for** / # **broadcast\_to** , similar to Turbo’s composite broadcasting. This lets you scope a stream to multiple models at once:  
  

```ruby
class ChatChannel < ApplicationCable::Channel
  def subscribed
    stream_for [room, current_user]  # composite target
  end
end
```

  
[Share rate limits across controllers with scope:](https://github.com/rails/rails/pull/53449)  
You can now share a single rate‑limit counter across multiple controllers by passing a **scope:** to **rate\_limit**. By default, limits are scoped per controller, but using the same scope value lets different controllers share the same bucket.  
  
You can view the whole list of changes [here](https://github.com/rails/rails/compare/@%7B2025-08-08%7D...main@%7B2025-08-15%7D).  
We had [35 contributors](https://contributors.rubyonrails.org/contributors/in-time-window/20250808-20250815) to the Rails codebase this past week!  
  
Until next time!  
  
Subscribe to get these updates mailed to you.  
  

Your weekly inside scoop of interesting commits, pull requests and more from [**Rails**](https://github.com/rails/rails).

<p><i><a href="https://world.hey.com/this.week.in.rails">Subscribe</a> to get these updates mailed to you.</i></p>
